v0.1.0
------
* decide whether queue processes should throw exceptions or just return false
* write a test harness
* implement logging! (in the daemon base class, in the user's data dir)
* implement some sort of "request failed" signal to emit when shit hits the fan
* use GConf for settings (stick it into Daemon base class)
  * photo directory
  * seconds for daemons to hang around
* push more stuff into the base class
  * all the queue handling is *very* similar
  * the thread creation is identical
  * the queue processing method has a consistent signature (although sometimes
    the number of arguments varies)
    * to address this, consider using a base request class that gets pushed
      into the queue, which the processing function then queries to get the
      arguments out (ex: path and degrees, for the rotation daemon)
  * make more generic signals (request_enqueued, request_succeeded,
    request_failed) and push them down
  * have clients also pass in an ID for each request, which the signal then
    returns (removing the necessity to use the arguments to the method as the
    natural key)
    * better yet, just have the return value of the method call indicate the
      status of the enqueue request instead of returning a signal
    * this also solves the "multiple operations on a single file" issue with
      the signals as currently implemented (e.g. 2 "rotate x.jpg 90 deg" calls
      in a row), wherein it's unclear to which call the signal is referring
* add the async fixes to the other daemons
* moves and deletes are scary (terrifying, actually!)... consider copies and
  moves, respectively, instead
  * "move" just copies from the source to the dest
  * "delete" moves to a "trash" directory, which can be purged periodically or
    browsed and reinstated (via the import API!)
* consider making the methods more batch-oriented (e.g. tag_photo ->
  tag_photos)
  * one call instead of many (less traffic on the bus)
  * the implementation doesn't change much (just loop over the input and
    enqueue)
  * easier for the client to account for progress (e.g. "123 of 3712 complete",
    where 3712 doesn't vary, as it will with the current approach)
  * semantics are less clear, though, for rotate (rotate all photos by the same
    angle?, have a matching array of angles? if the latter, how often will that
    be used?)
* implement artist and copyright settings and defaults in the import daemon
