v0.1.0
------
* when photo view is activated, pass along the photo path, not the thumb path
* pop up photo view w/both photos if duplicates are detected
  * if the user says "yes", then ignore the photo & don't import
  * if the user says "no", then increment the destination number (add 1 to
    the subsecond part of the file name) and continue
* integrate ThumbBrowser & PhotoViewer with the RotateDaemon
* integrate with Tracker (tracker-client)
  * learn SPARQL
  * figure out which queries are necessary/desired
  * abandon XMPL & invocation in favor of Tracker writeback (!!)
* make processing IDs more unique than per-service (to continue to be unique
  even after service restarts)
* moves and deletes are scary (terrifying, actually!)... consider copies and
  moves, respectively, instead
  * "delete" moves to a "trash" directory, which can be purged periodically or
    browsed and reinstated (via the import API!)
* decide if daemons should be handed full paths or "ideal" paths (e.g.
  '20091214_12345678'), from which they'll have to derive the root (e.g. 'jpg'
  or 'raw') and the suffix (e.g. '.jpg' or '.nef')...
* investigate whether there's a maximum argument length for DBus (batch calls
  could get huge)
* implement logging!
  * in the daemon base class
  * store in the user's data dir
  * maybe use GLib.Environment.get_application_name () to avoid logging as the
    base class
* implement artist and copyright settings and defaults in the import daemon
  * better yet, use the metadata daemon (see above)
* write a test harness
* make the GLib.Value stuff prettier (or find a shortcut in Vala's docs)
* transition the daemons to XMPL.
  * remove dependencies on Invocation wherever possible
  * explain in detail where not possible
* write full Vala bindings for exempi and do away with xmpl (or make xmpl a
  more Vala-friendly library than exempi, but with all the same pieces)
* fix up the compile flags in src/Makefile.am so that daemons don't get built
  with unnecessary dependencies (GTK, GConf, POSIX, etc.)
* compile common utilities (move, copy, path munging, "raw/high/low/thumb"
  constants, and other bits) into a single reusable spot
