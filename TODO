v0.1.0
------
* moves and deletes are scary (terrifying, actually!)... consider copies and
  moves, respectively, instead
  * "delete" moves to a "trash" directory, which can be purged periodically or
    browsed and reinstated (via the import API!)
* implement duplicate checking in the import daemon!
  * check file size (why?)
  * hash similarly-sized photos (why?)
  * pop up photo view w/both photos, asking if they are duplicates
    * if the user says "yes", then ignore the photo & don't import
    * if the user says "no", then increment the destination number (add 1 to
      the subsecond part of the file name) and continue
* design a metadata daemon, too
  * the tag daemon could just proxy to this, or this might eliminate the tag
    daemon altogether
  * ideally, it should be able to modify any valid metadata key
  * more realistically, it could have translation and amplification for common
    keys
    * Artist => Exif.Image.Artist, Xmp.dc.creator
    * Copyright => Exif.Image.Copyright, Iptc.Application2.Copyright, Xmp.dc.rights
    * Title => Xmp.dc.title
    * Description => Exif.Image.ImageDescription, Xmp.dc.description
    * Keywords (note: these are where the tags are kept) => Iptc.Application2.Keywords, Xmp.dc.subject
  * better yet, only use one set (Xmp > Iptc > Exif in my mind), simplifying
    implementation and removing the need to keep lots of different sets of
    metadata in sync
    * this means I could just use exempi, I do believe (although some EXIF
      parsing is still necessary to retrieve Exif.SubSecTime)
    * the other upside is that Tracker already indexes these (Xmp.dc.creator,
      Xmp.dc.subject) and exempi is already an optional dependency for Nautilus
* decide if daemons should be handed full paths or "ideal" paths (e.g.
  '20091214_12345678'), from which they'll have to derive the root (e.g. 'jpg'
  or 'raw') and the suffix (e.g. '.jpg' or '.nef')...
* investigate whether there's a maximum argument length for DBus (batch calls
  could get huge)
* implement logging!
  * in the daemon base class
  * store in the user's data dir
  * maybe use GLib.Environment.get_application_name () to avoid logging as the
    base class
* implement artist and copyright settings and defaults in the import daemon
  * better yet, use the metadata daemon (see above)
* write a test harness
* make the GLib.Value stuff prettier (or find a shortcut in Vala's docs)
* remove (where appropriate) the reliance on exiv2 in favor of xmpl (and maybe
  libexif for some EXIF bits).
* write full Vala bindings for exempi and do away with xmpl (or make xmpl a
  more Vala-friendly library than exempi, but with all the same pieces)
* fix up the compile flags in src/Makefile.am so that daemons don't get built
  with unnecessary dependencies (GTK, GConf, POSIX, etc.)
* compile common utilities (move, copy, path munging, "raw/high/low" constants,
  and other bits) into a single reusable spot.
