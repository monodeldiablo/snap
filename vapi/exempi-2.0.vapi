/* exempi.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Xmp", lower_case_cprefix = "xmp_")]
namespace Exempi {
	[CCode (cheader_filename = "exempi/xmpconsts.h", cname = "NS_DC")]
	public const string DC;

	[Compact]
	[CCode (cheader_filename = "exempi/xmp.h")]
	public class DateTime {
		public int32 day;
		public int32 hour;
		public int32 minute;
		public int32 month;
		public int32 nanoSecond;
		public int32 second;
		public int32 tzHour;
		public int32 tzMinute;
		public int32 tzSign;
		public int32 year;
	}
	[Compact]
	[CCode (cheader_filename = "exempi/xmp.h", free_function = "xmp_files_free")]
	public class FilePtr {
	}
	[Compact]
	[CCode (cheader_filename = "exempi/xmp.h", free_function = "xmp_iterator_free")]
	public class IteratorPtr {
	}
	[Compact]
	[CCode (cheader_filename = "exempi/xmp.h", free_function = "xmp_free")]
	public class Ptr {
	}
	[Compact]
	[CCode (cheader_filename = "exempi/xmp.h", free_function = "xmp_string_free")]
	public class StringPtr {
	}
	[CCode (cprefix = "XMP_CLOSE_", has_type_id = "0", cheader_filename = "exempi/xmp.h")]
	public enum CloseFileOptions {
		NOOPTION,
		SAFEUPDATE
	}
	[CCode (cprefix = "XMP_FT_", has_type_id = "0", cheader_filename = "exempi/xmp.h")]
	public enum FileType {
		PDF,
		PS,
		EPS,
		JPEG,
		JPEG2K,
		TIFF,
		GIF,
		PNG,
		SWF,
		FLA,
		FLV,
		MOV,
		AVI,
		CIN,
		WAV,
		MP3,
		SES,
		CEL,
		MPEG,
		MPEG2,
		MPEG4,
		WMAV,
		AIFF,
		HTML,
		XML,
		TEXT,
		PHOTOSHOP,
		ILLUSTRATOR,
		INDESIGN,
		AEPROJECT,
		AEPROJTEMPLATE,
		AEFILTERPRESET,
		ENCOREPROJECT,
		PREMIEREPROJECT,
		PREMIERETITLE,
		UNKNOWN
	}
	[CCode (cprefix = "XMP_ITER_", has_type_id = "0", cheader_filename = "exempi/xmp.h")]
	public enum IterOptions {
		CLASSMASK,
		PROPERTIES,
		ALIASES,
		NAMESPACES,
		JUSTCHILDREN,
		JUSTLEAFNODES,
		JUSTLEAFNAME,
		INCLUDEALIASES,
		OMITQUALIFIERS
	}
	[CCode (cprefix = "XMP_ITER_", has_type_id = "0", cheader_filename = "exempi/xmp.h")]
	public enum IterSkipOptions {
		SKIPSUBTREE,
		SKIPSIBLINGS
	}
	[CCode (cprefix = "XMP_OPEN_", has_type_id = "0", cheader_filename = "exempi/xmp.h")]
	public enum OpenFileOptions {
		NOOPTION,
		READ,
		FORUPDATE,
		ONLYXMP,
		CACHETNAIL,
		STRICTLY,
		USESMARTHANDLER,
		USEPACKETSCANNING,
		LIMITSCANNING,
		INBACKGROUND
	}
	[CCode (cprefix = "XMP_", has_type_id = "0", cheader_filename = "exempi/xmp.h")]
	public enum PropsBits {
		PROP_VALUE_IS_URI,
		PROP_HAS_QUALIFIERS,
		PROP_IS_QUALIFIER,
		PROP_HAS_LANG,
		PROP_HAS_TYPE,
		PROP_VALUE_IS_STRUCT,
		PROP_VALUE_IS_ARRAY,
		PROP_ARRAY_IS_UNORDERED,
		PROP_ARRAY_IS_ORDERED,
		PROP_ARRAY_IS_ALT,
		PROP_ARRAY_IS_ALTTEXT,
		PROP_IS_ALIAS,
		PROP_HAS_ALIASES,
		PROP_IS_INTERNAL,
		PROP_IS_STABLE,
		PROP_IS_DERIVED,
		PROP_ARRAY_FORM_MASK,
		PROP_COMPOSITE_MASK,
		IMPL_RESERVED_MASK
	}
	[CCode (cname = "xmp_append_array_item", cheader_filename = "exempi/xmp.h")]
	public static bool append_array_item (Exempi.Ptr xmp, string schema, string name, uint32 arrayOptions, string value, uint32 optionBits);
	[CCode (cname = "xmp_copy", cheader_filename = "exempi/xmp.h")]
	public static Exempi.Ptr copy (Exempi.Ptr xmp);
	[CCode (cname = "xmp_delete_localized_text", cheader_filename = "exempi/xmp.h")]
	public static bool delete_localized_text (Exempi.Ptr xmp, string schema, string name, string genericLang, string specificLang);
	[CCode (cname = "xmp_delete_property", cheader_filename = "exempi/xmp.h")]
	public static bool delete_property (Exempi.Ptr xmp, string schema, string name);
	[CCode (cname = "xmp_files_can_put_xmp", cheader_filename = "exempi/xmp.h")]
	public static bool files_can_put_xmp (Exempi.FilePtr xf, Exempi.Ptr xmp);
	[CCode (cname = "xmp_files_close", cheader_filename = "exempi/xmp.h")]
	public static bool files_close (Exempi.FilePtr xf, Exempi.CloseFileOptions options);
	[CCode (cname = "xmp_files_free", cheader_filename = "exempi/xmp.h")]
	public static bool files_free (Exempi.FilePtr xf);
	[CCode (cname = "xmp_files_get_new_xmp", cheader_filename = "exempi/xmp.h")]
	public static Exempi.Ptr files_get_new_xmp (Exempi.FilePtr xf);
	[CCode (cname = "xmp_files_get_xmp", cheader_filename = "exempi/xmp.h")]
	public static bool files_get_xmp (Exempi.FilePtr xf, Exempi.Ptr xmp);
	[CCode (cname = "xmp_files_new", cheader_filename = "exempi/xmp.h")]
	public static Exempi.FilePtr files_new ();
	[CCode (cname = "xmp_files_open", cheader_filename = "exempi/xmp.h")]
	public static bool files_open (Exempi.FilePtr xf, string p2, Exempi.OpenFileOptions options);
	[CCode (cname = "xmp_files_open_new", cheader_filename = "exempi/xmp.h")]
	public static Exempi.FilePtr files_open_new (string p1, Exempi.OpenFileOptions options);
	[CCode (cname = "xmp_files_put_xmp", cheader_filename = "exempi/xmp.h")]
	public static bool files_put_xmp (Exempi.FilePtr xf, Exempi.Ptr xmp);
	[CCode (cname = "xmp_free", cheader_filename = "exempi/xmp.h")]
	public static bool free (Exempi.Ptr xmp);
	[CCode (cname = "xmp_get_array_item", cheader_filename = "exempi/xmp.h")]
	public static bool get_array_item (Exempi.Ptr xmp, string schema, string name, int32 index, Exempi.StringPtr property, uint32? propsBits);
	[CCode (cname = "xmp_get_error", cheader_filename = "exempi/xmp.h")]
	public static int get_error ();
	[CCode (cname = "xmp_get_localized_text", cheader_filename = "exempi/xmp.h")]
	public static bool get_localized_text (Exempi.Ptr xmp, string schema, string name, string genericLang, string specificLang, Exempi.StringPtr actualLang, Exempi.StringPtr itemValue, uint32? propsBits);
	[CCode (cname = "xmp_get_property", cheader_filename = "exempi/xmp.h")]
	public static bool get_property (Exempi.Ptr xmp, string schema, string name, out Exempi.StringPtr property, uint32? propsBits);
	[CCode (cname = "xmp_get_property_bool", cheader_filename = "exempi/xmp.h")]
	public static bool get_property_bool (Exempi.Ptr xmp, string schema, string name, bool property, uint32? propsBits);
	[CCode (cname = "xmp_get_property_date", cheader_filename = "exempi/xmp.h")]
	public static bool get_property_date (Exempi.Ptr xmp, string schema, string name, Exempi.DateTime property, uint32? propsBits);
	[CCode (cname = "xmp_get_property_float", cheader_filename = "exempi/xmp.h")]
	public static bool get_property_float (Exempi.Ptr xmp, string schema, string name, double property, uint32? propsBits);
	[CCode (cname = "xmp_get_property_int32", cheader_filename = "exempi/xmp.h")]
	public static bool get_property_int32 (Exempi.Ptr xmp, string schema, string name, int32 property, uint32? propsBits);
	[CCode (cname = "xmp_has_property", cheader_filename = "exempi/xmp.h")]
	public static bool has_property (Exempi.Ptr xmp, string schema, string name);
	[CCode (cname = "xmp_init", cheader_filename = "exempi/xmp.h")]
	public static bool init ();
	[CCode (cname = "xmp_iterator_free", cheader_filename = "exempi/xmp.h")]
	public static bool iterator_free (Exempi.IteratorPtr iter);
	[CCode (cname = "xmp_iterator_new", cheader_filename = "exempi/xmp.h")]
	public static unowned Exempi.IteratorPtr iterator_new (Exempi.Ptr xmp, string schema, string propName, Exempi.IterOptions options);
	[CCode (cname = "xmp_iterator_next", cheader_filename = "exempi/xmp.h")]
	public static bool iterator_next (Exempi.IteratorPtr iter, Exempi.StringPtr schema, Exempi.StringPtr propName, Exempi.StringPtr propValue, uint32 options);
	[CCode (cname = "xmp_iterator_skip", cheader_filename = "exempi/xmp.h")]
	public static bool iterator_skip (Exempi.IteratorPtr iter, Exempi.IterSkipOptions options);
	[CCode (cname = "xmp_namespace_prefix", cheader_filename = "exempi/xmp.h")]
	public static bool namespace_prefix (string ns, Exempi.StringPtr prefix);
	[CCode (cname = "xmp_new", cheader_filename = "exempi/xmp.h")]
	public static Exempi.Ptr new (string buffer, size_t len);
	[CCode (cname = "xmp_new_empty", cheader_filename = "exempi/xmp.h")]
	public static Exempi.Ptr new_empty ();
	[CCode (cname = "xmp_parse", cheader_filename = "exempi/xmp.h")]
	public static bool parse (Exempi.Ptr xmp, string buffer, size_t len);
	[CCode (cname = "xmp_prefix_namespace_uri", cheader_filename = "exempi/xmp.h")]
	public static bool prefix_namespace_uri (string prefix, Exempi.StringPtr ns);
	[CCode (cname = "xmp_register_namespace", cheader_filename = "exempi/xmp.h")]
	public static bool register_namespace (string namespaceURI, string suggestedPrefix, Exempi.StringPtr registeredPrefix);
	[CCode (cname = "xmp_serialize", cheader_filename = "exempi/xmp.h")]
	public static bool serialize (Exempi.Ptr xmp, Exempi.StringPtr buffer, uint32 options, uint32 padding);
	[CCode (cname = "xmp_serialize_and_format", cheader_filename = "exempi/xmp.h")]
	public static bool serialize_and_format (Exempi.Ptr xmp, Exempi.StringPtr buffer, uint32 options, uint32 padding, string newline, string tab, int32 indent);
	[CCode (cname = "xmp_set_array_item", cheader_filename = "exempi/xmp.h")]
	public static bool set_array_item (Exempi.Ptr xmp, string schema, string name, int32 index, string value, uint32 optionBits);
	[CCode (cname = "xmp_set_localized_text", cheader_filename = "exempi/xmp.h")]
	public static bool set_localized_text (Exempi.Ptr xmp, string schema, string name, string genericLang, string specificLang, string value, uint32 optionBits);
	[CCode (cname = "xmp_set_property", cheader_filename = "exempi/xmp.h")]
	public static bool set_property (Exempi.Ptr xmp, string schema, string name, string value, uint32 optionBits);
	[CCode (cname = "xmp_set_property_bool", cheader_filename = "exempi/xmp.h")]
	public static bool set_property_bool (Exempi.Ptr xmp, string schema, string name, bool value, uint32 optionBits);
	[CCode (cname = "xmp_set_property_date", cheader_filename = "exempi/xmp.h")]
	public static bool set_property_date (Exempi.Ptr xmp, string schema, string name, Exempi.DateTime value, uint32 optionBits);
	[CCode (cname = "xmp_set_property_float", cheader_filename = "exempi/xmp.h")]
	public static bool set_property_float (Exempi.Ptr xmp, string schema, string name, double value, uint32 optionBits);
	[CCode (cname = "xmp_set_property_int32", cheader_filename = "exempi/xmp.h")]
	public static bool set_property_int32 (Exempi.Ptr xmp, string schema, string name, int32 value, uint32 optionBits);
	[CCode (cname = "xmp_string_cstr", cheader_filename = "exempi/xmp.h")]
	public static unowned string string_cstr (Exempi.StringPtr s);
	[CCode (cname = "xmp_string_free", cheader_filename = "exempi/xmp.h")]
	public static void string_free (Exempi.StringPtr s);
	[CCode (cname = "xmp_string_new", cheader_filename = "exempi/xmp.h")]
	public static Exempi.StringPtr string_new ();
	[CCode (cname = "xmp_terminate", cheader_filename = "exempi/xmp.h")]
	public static void terminate ();
}
